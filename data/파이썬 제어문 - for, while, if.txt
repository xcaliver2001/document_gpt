파이썬 제어문 - for, while, if
문법 / for와 while을 다르게 구현 / 에러처리 / 발생할 경우 / 예시

2. for와 while을 다르게 구현
3. 에러처리
4. 발생할 경우
5. 예시

1. 파이썬 제어문 기본문법
 가. 개요
  - 제어문은 프로그램의 흐름을 제어하여, 조건에 따라 코드 블록을 실행하거나 반복하는 구조
  - 제어문은 주로 조건문(If)과 반복문(for, while)으로 구분됨

1-1. IF문
 가.  IF조건문 기본 사용법
  - if, elif, else의 조합이다.
  - 비교/논리 등 연산자 활용, 논리적이고 간결한 조건 구성이 중요

 나. 연산자 종류
   1) 비교연산자 : 두 값을 비교
    a == b  a와 b가 같다.
    a != b a와 b가 다르다.
    a > b, a < b, a >= b, a<= b

   2) 논리연산자 :  여러 조건을 결합하거나 부정
    and, or, not

   3) 멤버십 연산자 : 특정 값이 시퀀스(리스트, 튜플, 문자열 등)에 포함되어 있는가
    in, not in

   4) 아이덴티티 연산자 : 둘이 같은지 다른지.
    is, is not
    - 여러 연산자가 조합이될 경우 어떤 순서로 적용될 것인가.
    - https://docs.python.org/3/reference/expressions.html#operator-precedence
    - 자주 쓰는 것들로만 정리하면 괄호, 곱셈나눗셈, 덧셈뺄셈, in, not in, not x, and, or 순이다.

  다. IF문 사용 예시
	x = 10
	if x > 0:
    		print("x는 양수입니다.")
	elif x == 0:
	    print("x는 0입니다.")
	else:
	    print("x는 음수입니다.")


1-2. for 반복문
 가.  정의
  - for 반복문은 시퀀스 자료형(리스트, 튜플, 문자열 등)이나 이터러블 객체의 각 요소를 순차적으로 순회하며 반복 작업을 수행
  [개념차이] 
  시퀀스 : 데이터가 순차적으로 저장, 인덱스로 접근 및 슬라이싱이 가능하다.
  시퀀스예시 : 리스트(list), 튜플(tuple), 문자열(str), 바이트(bytes), range
  이터러블 : 반복 가능한 객체이나, 순서를 갖지는 않음(슬라이싱, 인덱싱 불가)
  이터러블예시 : 리스트, 튜플, 문자열, 딕셔너리, 집합(set), 파일 객체, 제너레이터 등
  부가설명 : 모든 시퀀스는 반복가능하므로 이터러블 성질을 갖는다.(자주 사용되는 리스트, 튜블, 문자열), 그러나 모든 이터러블이 시퀀스는 아니다.(집합, 딕셔너리는 순서를 보장하지 않는다.)

   나. 기본 사용 방법
    - 리스트, 튜플, 문자열 등이 있을 때 그걸 넣어놓고 반복작업
	fruits = ['apple', 'banana', 'cherry']
	for fruit in fruits:
	    print(fruit)

  다. 주요 사용방법
   - 반복되는 대상 자체가 중요한 경우, 그 대상의 순서도 중요한 경우를 생각해볼 수 있다.
   - range, enumerate, zip과 같이 활용될 경우가 많다.
   - for 반복 중간에 break 또는 continue, pass를 사용하는 경우가 있을 수 있다.
   - 심화 : 대량의 데이터에 반복문을 사용하면 속도, 메모리에 좋지 않다. 판다스의 데이터프레임 형태에서는 apply, applymap 등의 벡터 연산을 

1-3. while 반복문


2. for와 while을 다르게 구현 차이점
 가. for,와 

3. 에러처리
 가. 배경
  반복문, 조건문을 사용하면서 nan값, 허용되지 않는 입력값 등 다양한 예외가 발생할 수 있다.
  파이썬의 내장된 에러를 사용할 수도 있고, 필요한 경우 사용자 정의 에러를 만들어서 사용할 수도 있다.
  try, except 구문 사용


4. 발생할 수 있는 경우
 중간에 에러가 발생하는 경우
 여러 예시

5. 예시
 가. if문 하나만 사용하기
 나. 중첩 for 사용하기
 다. if와 for 같이 사용하기
 라. Try, except 사용하기

  pandas iterrows()
 

  마. while 문 사용 예시
	count = 0
	while count < 5:
	    print(count)
	    count += 1

  - (자주하는 실수) 조건 끝에 :를 빼먹거나, 그 다음 조건을 쓰기 전까지 같은 블록에 대한 인덴트를 무시하는 경우
  - (주의사항) 문법은 간단한데, 비교 대상에 대한 자료형을 파악하지 않았거나, Null값을 비교하려 할 때 문제가 발생한다.
  